<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ryanieeee</title>
  
  <subtitle>小王的博客</subtitle>
  <link href="http://ryanieeee.cn/atom.xml" rel="self"/>
  
  <link href="http://ryanieeee.cn/"/>
  <updated>2023-08-02T09:47:46.277Z</updated>
  <id>http://ryanieeee.cn/</id>
  
  <author>
    <name>Ryanieeee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Pytorch学习笔记</title>
    <link href="http://ryanieeee.cn/2023/08/01/pytorch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://ryanieeee.cn/2023/08/01/pytorch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2023-08-01T09:10:57.180Z</published>
    <updated>2023-08-02T09:47:46.277Z</updated>
    
    <content type="html"><![CDATA[<h1>浅谈Pytorch</h1><p>本文主要介绍和解释一些pytorch中常用的函数以及其使用方法</p><h2 id="1-Dataset类">1.Dataset类</h2><p>可以创建适应任何模型的数据集接口</p><h3 id="1">(1)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os <span class="comment">#python中关于系统的一个库，可以获取文件夹中所有文件的地址</span></span><br></pre></td></tr></table></figure><h3 id="2">(2)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class MyDataset (Dataset):</span><br><span class="line">    #初始化类</span><br><span class="line">    def __init__ (self,root_dir,label_dir):</span><br><span class="line">        self.root_dir = root_dir</span><br><span class="line">        self.label_dir = label_dir</span><br><span class="line">        self.path = os.path.join(self.root_dir,self.label_dir) #形成样本路径</span><br><span class="line">        self.img_path = os.listdir(self.path)  #获取样本列表</span><br><span class="line">    #获取样本对</span><br><span class="line">    def __getitem__ (self,idx):</span><br><span class="line">        img_name = self.img_path[idx]  #获取样本名称</span><br><span class="line">        img_item_path = os.path.join(self.root_dir,self.label_dir,img_name)</span><br><span class="line">        img = Image.open(img_item_path)</span><br><span class="line">        label = self.label_dir</span><br><span class="line">        return img, label</span><br><span class="line">    </span><br><span class="line">    def __len__ (self):</span><br><span class="line">        return len(self.img_path)</span><br></pre></td></tr></table></figure><p>root_dir: 根目录<br>label_dir: 标签的地址<br>os.path.join：把括号里的路径结合在一起<br>os.listdir: 制成列表<br>idx: 样本位置</p><h2 id="2-TensorDataset">2.TensorDataset</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train_dataset = TensorDataset(data,targets)</span><br><span class="line"><span class="comment">#其内部的数据格式：(data_i,targets_i)</span></span><br></pre></td></tr></table></figure><p>功能：用来对tensor数据打包，等同于zip函数的功能<br>用途：通常用于打包数据和标签，返回打包成元组的dataset<br>要求：送入该函数的两组tensor第一个维度大小必须相等</p><h2 id="3-ListDataset">3.ListDataset</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ListDataset(data)</span><br></pre></td></tr></table></figure><p>功能：将list类型数据处理成Dataset类<br>用途：将list转换为dataset类型，可以再送入TensorDataset等函数进一步处理<br>要求：list中无嵌套</p><h2 id="4-TransformDataset">4.TransformDataset</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TransformDataset(dataset,transform)</span><br></pre></td></tr></table></figure><p>功能：对dataset进行transform操作<br>用途：自定义transform操作，对dataset中数据进一步操作<br>要求：第一个参数必须是dataset类数据</p><h2 id="5-TensorBoard">5.TensorBoard</h2><h3 id="SummaryWriter">SummaryWriter()</h3><p>常用函数1: add_scalar<br>其参数:<br>tag: 类似于图表的标题<br>scalar_value: y轴<br>global_step: x轴<br>dataformats: 图像数据格式，默认为“CHW”，也可以改为“HWC”或“HW”等</p><p>代码实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">writer = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    writer.add_scalar(<span class="string">&quot;y=x&quot;</span>,i,i)  <span class="comment">#y=x图像</span></span><br><span class="line">writer.close()  <span class="comment">#写完记得关闭</span></span><br></pre></td></tr></table></figure><p>查看方式： 在终端窗口输入(虚拟环境中):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensorboard--logdir = 文件绝对路径--port = 端口名</span><br></pre></td></tr></table></figure><p>注意：文件的路径不能含有中文，端口名可以不加</p><p>常用函数2. add_image</p><p>其参数:<br>tag: 类似于标题<br>img_tensor: torch.Tensor或np.array类型的图形数据<br>global_step: 记录这是这是第几个子图 （int）<br>dataformats；图像数据格式，默认为“CHW”，也可以改为“HWC”或“HW”等</p><p>代码实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">writer = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line">image_path = <span class="string">&quot;xxx&quot;</span></span><br><span class="line">image_PIL = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">image_array = np.array(img_PIL)</span><br><span class="line">writer_add_image(<span class="string">&quot;test&quot;</span>,image_array,<span class="number">1</span>,dataformats=(<span class="string">&#x27;HW&#x27;</span>))</span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><h2 id="6-Transforms">6.Transforms</h2><p>(1) 简述：Transforms是pytorch的图像处理工具包，是torchvision模块下的一个一个类的集合，可以对图像或数据进行格式变换，裁剪，缩放，旋转等<br>(2) 运行机制：采用transforms.Compose()，将一系列的transforms有序组合，实现时按照这些方法依次对图像操作<br>(3) 下面介绍一些常见的操作：</p><ol><li class="lvl-3"><p>随机裁剪：transforms.RandomCrop(size)<br>size: 给定的尺寸</p></li><li class="lvl-3"><p>中心裁剪：transforms.CenterCrop(size)<br>size: 给定的尺寸</p></li><li class="lvl-3"><p>随机长宽比裁剪 transforms.RandomResizedCrop(size, scale, ratio)<br>size: 给定的尺寸<br>scale: 随机裁剪的大小区间，如scale=(0.08, 1.0)，表示随机crop出来的图片会在的0.08倍至1倍之间<br>ratio：随机长宽比设置</p></li><li class="lvl-3"><p>上下左右中心裁剪：transforms.FiveCrop(size)<br>返回5个值</p></li><li class="lvl-3"><p>上下左右中心裁剪后翻转: transforms.TenCrop(size)<br>返回10个值</p></li><li class="lvl-3"><p>依概率p水平翻转: transforms.RandomHorizontalFlip(p=0.5)<br>p: 默认为0.5</p></li><li class="lvl-3"><p>依概率p垂直翻转：transforms.RandomVerticalFlip(p=0.5)<br>p: 默认为0.5</p></li><li class="lvl-3"><p>随机旋转：transforms.RandomRotation(degrees, resample=False, expand=False, center=None)<br>degrees: 若为单个数，如 30，则表示在（-30，+30）之间随机旋转若为sequence，如(30，60)，则表示在30-60度之间随机旋转<br>resample: 重采样方法选择<br>expand: 可选扩展标志。如果为true，则扩展输出，使其足够大，以容纳整个旋转图像。如果为false或省略，则使输出图像大小不变。<br>center: 可选为中心旋转还是左上角旋转,默认中心旋转</p></li><li class="lvl-3"><p>重置图像尺寸：resize：transforms.Resize(size, interpolation)<br>size: 尺寸<br>interpolation: 插值方法</p></li><li class="lvl-4"><p>标准化：transforms.Normalize(mean,std)<br>mean: 均值，一般都取(0.5,0.5,0.5)<br>std：标准差，一般都取(0.5,0.5,0.5)</p></li><li class="lvl-4"><p>转为tensor：transforms.ToTensor</p></li><li class="lvl-4"><p>修改亮度、对比度和饱和度：transforms.ColorJitter(brightness=0, contrast=0, saturation=0, hue=0)<br>参数分别为：亮度，对比度，饱和度，色调</p></li><li class="lvl-4"><p>转灰度图：transforms.Grayscale(num_output_channels)<br>num_output_channels: 当为1时，正常的灰度图，当为3时， 3 channel with r == g == b</p></li><li class="lvl-4"><p>transforms.RandomChoice(transforms)<br>从给定的一系列transforms中选一个进行操作</p></li><li class="lvl-4"><p>transforms.RandomApply(transforms, p=0.5)<br>给一个transform加上概率，以一定的概率执行该操作</p></li><li class="lvl-4"><p>transforms.RandomOrder<br>将transforms中的操作顺序随机打乱</p></li></ol><p>(4)代码实例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">train_transform = transforms.Compose([</span><br><span class="line">    transforms.Resize((32, 32)),  # 缩放</span><br><span class="line">    transforms.RandomCrop(32, padding=4),  # 随机裁剪</span><br><span class="line">    transforms.ToTensor(),  # 图片转张量，同时归一化0-255 ---》 0-1</span><br><span class="line">    transforms.Normalize(norm_mean, norm_std),  # 标准化均值为0标准差为1</span><br><span class="line">])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Dataloader">Dataloader</h2><h3 id="Dataloader与Dataset的关系">Dataloader与Dataset的关系</h3><p>如果把Dataset比作一副扑克，那么Dataloader就相当于手上抓的牌，我们的手就相当于神经网络的输入接口</p><h3 id="torch-utils-data-DataLoader">torch.utils.data.DataLoader()</h3><p>构建可迭代的数据装载器, 我们在训练的时候，每一个for循环，每一次iteration，就是从DataLoader中获取一个batch_size大小的数据的<br>我们常用的几个参数:<br>dataset: Dataset类， 决定数据从哪读取以及如何读取<br>bathsize: 批大小<br>shuffle: 每个epoch是否乱序<br>drop_last: 当样本数不能被batchsize整除时， 是否舍弃最后一批数据<br>num_workers: 表示线程数，数据集较小一点的可以不用设</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;浅谈Pytorch&lt;/h1&gt;
&lt;p&gt;本文主要介绍和解释一些pytorch中常用的函数以及其使用方法&lt;/p&gt;
&lt;h2 id=&quot;1-Dataset类&quot;&gt;1.Dataset类&lt;/h2&gt;
&lt;p&gt;可以创建适应任何模型的数据集接口&lt;/p&gt;
&lt;h3 id=&quot;1&quot;&gt;(1)&lt;/h3&gt;
&lt;f</summary>
      
    
    
    
    <category term="机器学习" scheme="http://ryanieeee.cn/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
</feed>
